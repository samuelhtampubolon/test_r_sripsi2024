# -*- coding: utf-8 -*-
"""Test R skripsi 2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zkPcKec3dZ3IayCqE3yHxxvXuFJiMb9e
"""

# Example data: three groups with different observations
group1 <- c(23, 45, 67, 89, 43, 23, 56)
group2 <- c(34, 56, 78, 12, 45, 34, 23)
group3 <- c(12, 34, 56, 78, 89, 12, 34)

# Combine the data into a single data frame
data <- data.frame(
  values = c(group1, group2, group3),
  group = factor(rep(c("group1", "group2", "group3"), each = 7))
)

# Perform one-way ANOVA
anova_result <- aov(values ~ group, data = data)

# Display the summary of the ANOVA
summary(anova_result)

# Interpretation
# If the p-value in the summary is less than 0.05, reject the null hypothesis:
# There is a significant difference between the group means.

# Example data: two variables
x <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
y <- c(12, 24, 36, 48, 60, 72, 84, 96, 108, 120)

# Calculate Pearson correlation coefficient
correlation_result <- cor.test(x, y, method = "pearson")

# Display the correlation coefficient and p-value
cat("Pearson correlation coefficient:", correlation_result$estimate, "\n")
cat("P-value:", correlation_result$p.value, "\n")

# Interpretation
alpha <- 0.05
if (correlation_result$p.value < alpha) {
  cat("Reject the null hypothesis: There is a significant correlation between the two variables.\n")
} else {
  cat("Fail to reject the null hypothesis: There is no significant correlation between the two variables.\n")
}

# Contoh data: tiga grup dengan pengamatan yang berbeda
group1 <- c(23, 45, 67, 89, 43, 23, 56)
group2 <- c(34, 56, 78, 12, 45, 34, 23)
group3 <- c(12, 34, 56, 78, 89, 12, 34)

# Gabungkan data menjadi satu data frame
data <- data.frame(
  values = c(group1, group2, group3),
  group = factor(rep(c("group1", "group2", "group3"), each = 7))
)

# Melakukan ANOVA satu arah
anova_result <- aov(values ~ group, data = data)

# Menampilkan ringkasan hasil ANOVA
summary(anova_result)

# Interpretasi
# Jika p-value dalam ringkasan kurang dari 0.05, tolak hipotesis nol:
# Ada perbedaan yang signifikan antara rata-rata grup.

# Contoh data: dua variabel
x <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
y <- c(12, 24, 36, 48, 60, 72, 84, 96, 108, 120)

# Menghitung koefisien korelasi Pearson
correlation_result <- cor.test(x, y, method = "pearson")

# Menampilkan koefisien korelasi dan p-value
cat("Koefisien Korelasi Pearson:", correlation_result$estimate, "\n")
cat("P-value:", correlation_result$p.value, "\n")

# Interpretasi
alpha <- 0.05
if (correlation_result$p.value < alpha) {
  cat("Tolak hipotesis nol: Ada korelasi yang signifikan antara kedua variabel.\n")
} else {
  cat("Gagal menolak hipotesis nol: Tidak ada korelasi yang signifikan antara kedua variabel.\n")
}

# Contoh data: tiga kolom dengan beberapa pengamatan
data <- data.frame(
  value1 = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
  value2 = c(15, 25, 35, 45, 55, 65, 75, 85, 95, 105),
  value3 = c(20, 30, 40, 50, 60, 70, 80, 90, 100, 110)
)

# Menampilkan ringkasan statistik deskriptif
summary(data)

# Menampilkan ringkasan statistik deskriptif untuk setiap kolom secara manual
cat("Rata-rata:\n")
print(sapply(data, mean, na.rm = TRUE))

cat("\nMedian:\n")
print(sapply(data, median, na.rm = TRUE))

cat("\nStandar Deviasi:\n")
print(sapply(data, sd, na.rm = TRUE))

cat("\nMinimum:\n")
print(sapply(data, min, na.rm = TRUE))

cat("\nMaximum:\n")
print(sapply(data, max, na.rm = TRUE))

cat("\nKuartil:\n")
print(sapply(data, quantile, na.rm = TRUE))

# Contoh data: kolom 'value' dan 'gender' dengan beberapa pengamatan
data <- data.frame(
  value = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105),
  gender = c('Male', 'Male', 'Male', 'Male', 'Male', 'Male', 'Male', 'Male', 'Male', 'Male',
             'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female')
)

# Memisahkan data berdasarkan gender
data_male <- subset(data, gender == 'Male')
data_female <- subset(data, gender == 'Female')

# Menampilkan ringkasan statistik deskriptif untuk setiap gender
cat("Ringkasan Statistik Deskriptif untuk Laki-Laki:\n")
print(summary(data_male$value))

cat("\nRata-rata (Male):", mean(data_male$value, na.rm = TRUE))
cat("\nMedian (Male):", median(data_male$value, na.rm = TRUE))
cat("\nStandar Deviasi (Male):", sd(data_male$value, na.rm = TRUE))
cat("\nMinimum (Male):", min(data_male$value, na.rm = TRUE))
cat("\nMaximum (Male):", max(data_male$value, na.rm = TRUE))
cat("\nKuartil (Male):\n")
print(quantile(data_male$value, na.rm = TRUE))

cat("\nRingkasan Statistik Deskriptif untuk Perempuan:\n")
print(summary(data_female$value))

cat("\nRata-rata (Female):", mean(data_female$value, na.rm = TRUE))
cat("\nMedian (Female):", median(data_female$value, na.rm = TRUE))
cat("\nStandar Deviasi (Female):", sd(data_female$value, na.rm = TRUE))
cat("\nMinimum (Female):", min(data_female$value, na.rm = TRUE))
cat("\nMaximum (Female):", max(data_female$value, na.rm = TRUE))
cat("\nKuartil (Female):\n")
print(quantile(data_female$value, na.rm = TRUE))

# Memuat paket yang diperlukan
install.packages("ggplot2")
library(ggplot2)

# Contoh data: kolom nilai dan gender
data <- data.frame(
  value = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105),
  gender = c('Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female',
             'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female')
)

# Menampilkan ringkasan statistik deskriptif berdasarkan gender
summary_by_gender <- aggregate(value ~ gender, data, summary)
print(summary_by_gender)

# Menghitung rata-rata, median, dan standar deviasi berdasarkan gender
mean_by_gender <- aggregate(value ~ gender, data, mean)
median_by_gender <- aggregate(value ~ gender, data, median)
sd_by_gender <- aggregate(value ~ gender, data, sd)

cat("Rata-rata berdasarkan gender:\n")
print(mean_by_gender)

cat("\nMedian berdasarkan gender:\n")
print(median_by_gender)

cat("\nStandar Deviasi berdasarkan gender:\n")
print(sd_by_gender)

# Membuat pie chart untuk distribusi gender
gender_counts <- table(data$gender)
pie(gender_counts, labels = paste(names(gender_counts), "\n", gender_counts), main = "Distribusi Gender")

# Contoh data: skor dari 5 item kuesioner untuk 10 responden
data <- data.frame(
  item1 = c(4, 3, 5, 4, 2, 5, 4, 3, 5, 4),
  item2 = c(3, 2, 4, 3, 1, 4, 3, 2, 4, 3),
  item3 = c(5, 4, 5, 5, 3, 5, 4, 4, 5, 4),
  item4 = c(4, 3, 5, 4, 2, 5, 4, 3, 5, 4),
  item5 = c(3, 2, 4, 3, 1, 4, 3, 2, 4, 3)
)

# Menghitung skor total untuk setiap responden
data$total <- rowSums(data)

# Menghitung koefisien korelasi Pearson antara setiap item dan skor total
validity_results <- sapply(data[1:5], function(item) cor(item, data$total))

# Menampilkan hasil uji validitas
print(validity_results)

# Interpretasi
alpha <- 0.05
validity_significance <- sapply(data[1:5], function(item) cor.test(item, data$total)$p.value < alpha)
print(validity_significance)

install.packages("psych")
# Memuat paket yang diperlukan
library(psych)

# Contoh data: skor dari 5 item kuesioner untuk 10 responden
data <- data.frame(
  item1 = c(4, 3, 5, 4, 2, 5, 4, 3, 5, 4),
  item2 = c(3, 2, 4, 3, 1, 4, 3, 2, 4, 3),
  item3 = c(5, 4, 5, 5, 3, 5, 4, 4, 5, 4),
  item4 = c(4, 3, 5, 4, 2, 5, 4, 3, 5, 4),
  item5 = c(3, 2, 4, 3, 1, 4, 3, 2, 4, 3)
)

# Melakukan uji reliabilitas menggunakan koefisien Cronbach's alpha
reliability_result <- alpha(data)

# Menampilkan hasil uji reliabilitas
print(reliability_result)

# Menampilkan nilai Cronbach's alpha
cat("Cronbach's alpha:", reliability_result$total$raw_alpha, "\n")

# Menampilkan standar deviasi setiap item
cat("\nStandard Deviations:\n")
print(reliability_result$item.stats$sd)

# Contoh data: skor dari suatu pengukuran untuk 20 responden
data <- c(4, 3, 5, 4, 2, 5, 4, 3, 5, 4, 6, 3, 5, 7, 3, 5, 4, 3, 6, 5)

# Uji Normalitas menggunakan uji Shapiro-Wilk
shapiro_test <- shapiro.test(data)

# Menampilkan hasil uji normalitas
cat("Shapiro-Wilk normality test:\n")
print(shapiro_test)

# Membuat Normal Probability Plot (Q-Q plot)
qqnorm(data, main="Normal Q-Q Plot with Regression Line")
qqline(data, col="red")

# Menentukan outliers (nilai di luar 1.5*IQR dari kuartil pertama atau ketiga)
Q1 <- quantile(data, 0.25)
Q3 <- quantile(data, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- data[data < lower_bound | data > upper_bound]

# Menampilkan outliers
cat("Outliers:\n")
print(outliers)

# Menambahkan outliers ke plot
points(outliers, rep(-2, length(outliers)), col="blue", pch=19)
legend("topleft", legend=c("Data", "Regression Line", "Outliers"), col=c("black", "red", "blue"), pch=c(1, NA, 19), lty=c(NA, 1, NA))

# Contoh data: skor dari suatu pengukuran untuk 20 responden
data <- c(4, 3, 5, 4, 2, 5, 4, 3, 5, 4, 6, 3, 5, 7, 3, 5, 4, 3, 6, 5)

# Uji Normalitas menggunakan uji Shapiro-Wilk
shapiro_test <- shapiro.test(data)

# Menampilkan hasil uji normalitas
cat("Shapiro-Wilk normality test:\n")
print(shapiro_test)

# Menentukan outliers (nilai di luar 1.5*IQR dari kuartil pertama atau ketiga)
Q1 <- quantile(data, 0.25)
Q3 <- quantile(data, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- data[data < lower_bound | data > upper_bound]

# Menampilkan outliers
cat("Outliers:\n")
print(outliers)

# Membuat histogram dengan garis density plot
hist(data, breaks=10, probability=TRUE, main="Histogram with Density Plot", xlab="Value", ylab="Density", col="lightblue", border="black")
lines(density(data), col="red", lwd=2)

# Menambahkan garis normal distribution
x <- seq(min(data), max(data), length=100)
y <- dnorm(x, mean=mean(data), sd=sd(data))
lines(x, y, col="blue", lwd=2, lty=2)

# Menambahkan outliers ke plot
points(outliers, rep(0, length(outliers)), col="blue", pch=19)

# Legenda
legend("topright", legend=c("Density", "Normal Distribution", "Outliers"), col=c("red", "blue", "blue"), lwd=c(2, 2, NA), lty=c(1, 2, NA), pch=c(NA, NA, 19))

# Memuat paket yang diperlukan
install.packages("car")
library(car)

# Contoh data: variabel independen (X1, X2, X3) dan variabel dependen (Y)
data <- data.frame(
  Y = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
  X1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X2 = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20),
  X3 = c(3, 6, 9, 12, 15, 18, 21, 24, 27, 30)
)

# Menjalankan regresi linear
model <- lm(Y ~ X1 + X2 + X3, data = data)

# Menghitung VIF dan Tolerance
vif_values <- vif(model)
tolerance_values <- 1 / vif_values

# Membuat tabel dengan informasi Tolerance dan VIF
results <- data.frame(
  Variable = names(vif_values),
  Tolerance = tolerance_values,
  VIF = vif_values
)

# Menambahkan informasi cutoff untuk interpretasi
results$High_Multicollinearity <- ifelse(results$VIF > 10, "Yes", "No")

# Menampilkan tabel hasil
print(results)

# Interpretasi
cat("\nInterpretasi:\n")
cat("Tolerance di bawah 0.1 dan VIF di atas 10 menunjukkan adanya multikolinearitas tinggi.\n")

install.packages("lmtest")
# Memuat paket yang diperlukan
library(lmtest)

# Contoh data: variabel independen (X1, X2, X3) dan variabel dependen (Y)
data <- data.frame(
  Y = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
  X1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X2 = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20),
  X3 = c(3, 6, 9, 12, 15, 18, 21, 24, 27, 30)
)

# Menjalankan regresi linear
model <- lm(Y ~ X1 + X2 + X3, data = data)

# Melakukan uji heteroskedastisitas menggunakan uji Breusch-Pagan
bp_test <- bptest(model)

# Menampilkan hasil uji Breusch-Pagan
cat("Hasil Uji Breusch-Pagan:\n")
print(bp_test)

# Membuat tabel hasil
results <- data.frame(
  Statistic = bp_test$statistic,
  Parameter = bp_test$parameter,
  P_Value = bp_test$p.value,
  Interpretation = ifelse(bp_test$p.value < 0.05, "Heteroskedastisitas terdeteksi", "Tidak ada heteroskedastisitas")
)

# Menampilkan tabel hasil
print(results)

# Interpretasi
cat("\nInterpretasi:\n")
cat("P-Value di bawah 0.05 menunjukkan adanya heteroskedastisitas.\n")

# Contoh data: variabel independen (X1, X2, X3) dan variabel dependen (Y)
data <- data.frame(
  Y = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
  X1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X2 = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20),
  X3 = c(3, 6, 9, 12, 15, 18, 21, 24, 27, 30)
)

# Menjalankan regresi linear
model <- lm(Y ~ X1 + X2 + X3, data = data)

# Menghitung R-square dan Adjusted R-square
r_squared <- summary(model)$r.squared
adjusted_r_squared <- summary(model)$adj.r.squared

# Membuat tabel hasil
results <- data.frame(
  Measure = c("R-squared", "Adjusted R-squared"),
  Value = c(r_squared, adjusted_r_squared)
)

# Menampilkan tabel hasil
print(results)

# Interpretasi
cat("\nInterpretasi:\n")
cat("R-squared mengukur proporsi variabilitas dalam variabel dependen yang dapat dijelaskan oleh variabel independen.\n")
cat("Adjusted R-squared mengkoreksi R-squared untuk jumlah variabel independen dan ukuran sampel, sehingga memberikan ukuran yang lebih akurat dari kekuatan model.\n")

# Contoh data: variabel independen (X) dan variabel dependen (Y)
data <- data.frame(
  Y = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100),
  X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
)

# Menjalankan regresi linear
model <- lm(Y ~ X, data = data)

# Ringkasan hasil regresi
summary_model <- summary(model)

# Menyusun tabel hasil uji hipotesis
results <- data.frame(
  Term = rownames(summary_model$coefficients),
  Estimate = summary_model$coefficients[, "Estimate"],
  Std_Error = summary_model$coefficients[, "Std. Error"],
  t_value = summary_model$coefficients[, "t value"],
  p_value = summary_model$coefficients[, "Pr(>|t|)"]
)

# Menambahkan kolom interpretasi berdasarkan p-value
results$Significance <- ifelse(results$p_value < 0.05, "Significant", "Not Significant")

# Menampilkan tabel hasil
print(results)

# Analisis
cat("\nAnalisis:\n")
cat("Koefisien regresi menggambarkan seberapa besar perubahan yang diharapkan dalam variabel dependen (Y) untuk setiap unit perubahan dalam variabel independen (X).\n")
cat("P-value digunakan untuk menguji signifikansi statistik dari koefisien. Jika p-value < 0.05, maka koefisien tersebut signifikan secara statistik.\n")

# Visualisasi grafik regresi
plot(data$X, data$Y, main="Scatter Plot with Regression Line", xlab="X", ylab="Y", pch=19, col="blue")
abline(model, col="red", lwd=2)

# Menambahkan teks ke plot untuk menunjukkan koefisien dan p-value
text(2, 80, paste("Intercept =", round(results$Estimate[1], 2)), col="red")
text(2, 70, paste("Slope =", round(results$Estimate[2], 2)), col="red")
text(2, 60, paste("P-value =", round(results$p_value[2], 4)), col="red")

# Menyimpan plot
dev.copy(png, file="regression_plot.png")
dev.off()

# Memuat paket yang diperlukan
install.packages("psych")
install.packages("ggplot2")
library(psych)
library(ggplot2)

# Contoh data: variabel independen (X1), moderator (M), dan variabel dependen (Y)
data <- data.frame(
  X1_item1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X1_item2 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item1 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item2 = c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
  M_item1 = c(5, 4, 6, 5, 7, 6, 5, 7, 6, 8),
  M_item2 = c(4, 3, 5, 4, 6, 5, 4, 6, 5, 7),
  Y_item1 = c(15, 18, 16, 20, 22, 24, 21, 23, 25, 27),
  Y_item2 = c(14, 17, 15, 19, 21, 23, 20, 22, 24, 26)
)

# Menghitung skor rata-rata untuk setiap konstruk
data$X1 <- rowMeans(data[, c("X1_item1", "X1_item2")])
data$X2 <- rowMeans(data[, c("X2_item1", "X2_item2")])
data$M <- rowMeans(data[, c("M_item1", "M_item2")])
data$Y <- rowMeans(data[, c("Y_item1", "Y_item2")])

# Model regresi dengan interaksi moderasi
model <- lm(Y ~ X1 * M, data = data)

# Ringkasan hasil regresi
summary_model <- summary(model)

# Menyusun tabel hasil uji hipotesis
results <- data.frame(
  Term = rownames(summary_model$coefficients),
  Estimate = summary_model$coefficients[, "Estimate"],
  Std_Error = summary_model$coefficients[, "Std. Error"],
  t_value = summary_model$coefficients[, "t value"],
  p_value = summary_model$coefficients[, "Pr(>|t|)"]
)

# Menambahkan kolom interpretasi berdasarkan p-value
results$Significance <- ifelse(results$p_value < 0.05, "Significant", "Not Significant")

# Menampilkan tabel hasil
print(results)

# Analisis
cat("\nAnalisis:\n")
cat("Koefisien regresi menggambarkan seberapa besar perubahan yang diharapkan dalam variabel dependen (Y) untuk setiap unit perubahan dalam variabel independen (X1) dan interaksi dengan moderator (M).\n")
cat("P-value digunakan untuk menguji signifikansi statistik dari koefisien. Jika p-value < 0.05, maka koefisien tersebut signifikan secara statistik.\n")
cat("Interaksi yang signifikan antara X1 dan M menunjukkan bahwa M memoderasi efek X1 terhadap Y.\n")

# Visualisasi grafik regresi dengan interaksi moderasi
ggplot(data, aes(x = X1, y = Y, color = M)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x * color, se = FALSE) +
  labs(title = "Scatter Plot with Regression Line",
       x = "X1",
       y = "Y",
       color = "Moderator (M)") +
  theme_minimal()

# Menyimpan plot
ggsave("moderation_plot.png")

# Memuat paket yang diperlukan
install.packages("lavaan")
install.packages("semPlot")
library(lavaan)
library(semPlot)

# Contoh data: variabel independen (X), mediator (M), dan variabel dependen (Y)
data <- data.frame(
  X1_item1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X1_item2 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item1 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item2 = c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
  M_item1 = c(5, 4, 6, 5, 7, 6, 5, 7, 6, 8),
  M_item2 = c(4, 3, 5, 4, 6, 5, 4, 6, 5, 7),
  Y_item1 = c(15, 18, 16, 20, 22, 24, 21, 23, 25, 27),
  Y_item2 = c(14, 17, 15, 19, 21, 23, 20, 22, 24, 26)
)

# Menghitung skor rata-rata untuk setiap konstruk
data$X <- rowMeans(data[, c("X1_item1", "X1_item2", "X2_item1", "X2_item2")])
data$M <- rowMeans(data[, c("M_item1", "M_item2")])
data$Y <- rowMeans(data[, c("Y_item1", "Y_item2")])

# Menentukan model mediasi
mediation_model <- '
  # Hubungan langsung
  Y ~ c*X

  # Hubungan tidak langsung (mediasi)
  M ~ a*X
  Y ~ b*M

  # Efek mediasi
  indirect := a*b
  direct := c
  total := c + (a*b)
'

# Melakukan analisis mediasi
fit <- sem(mediation_model, data = data)

# Menampilkan ringkasan hasil
summary(fit, fit.measures = TRUE, standardized = TRUE)

# Menyusun tabel hasil uji mediasi
results <- parameterEstimates(fit, standardized = TRUE)
results <- results[results$op == "~" | results$op == ":=", ]

# Menambahkan kolom interpretasi berdasarkan p-value
results$Significance <- ifelse(results$pvalue < 0.05, "Significant", "Not Significant")

# Menampilkan tabel hasil
print(results)

# Analisis
cat("\nAnalisis:\n")
cat("Koefisien 'a' menggambarkan pengaruh X terhadap M.\n")
cat("Koefisien 'b' menggambarkan pengaruh M terhadap Y.\n")
cat("Koefisien 'c' menggambarkan pengaruh langsung X terhadap Y.\n")
cat("Koefisien 'indirect' menggambarkan efek mediasi (pengaruh tidak langsung).\n")
cat("Jika p-value < 0.05, maka efek tersebut signifikan secara statistik.\n")

# Visualisasi model mediasi
semPaths(fit, what = "std", edge.label.cex = 1.2, layout = "tree", nCharNodes = 0, sizeMan = 7, edge.color = "blue", style = "lisrel")

# Memuat paket yang diperlukan
install.packages("plspm")
install.packages("ggplot2")
library(plspm)
library(ggplot2)

# Contoh data: variabel laten dengan dua sub-variabel, masing-masing dua item
data <- data.frame(
  X1_item1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X1_item2 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item1 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item2 = c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
  M_item1 = c(5, 4, 6, 5, 7, 6, 5, 7, 6, 8),
  M_item2 = c(4, 3, 5, 4, 6, 5, 4, 6, 5, 7),
  Y_item1 = c(15, 18, 16, 20, 22, 24, 21, 23, 25, 27),
  Y_item2 = c(14, 17, 15, 19, 21, 23, 20, 22, 24, 26)
)

# Menentukan matriks jalur (path matrix)
path_matrix <- rbind(
  c(0, 0, 0),
  c(1, 0, 0),
  c(1, 1, 0)
)
colnames(path_matrix) <- rownames(path_matrix) <- c("X", "M", "Y")

# Menentukan blok indikator untuk setiap variabel laten
blocks <- list(
  c("X1_item1", "X1_item2", "X2_item1", "X2_item2"),
  c("M_item1", "M_item2"),
  c("Y_item1", "Y_item2")
)

# Menentukan tipe skema jalur
modes <- c("A", "A", "A")

# Melakukan analisis PLS-SEM
pls_model <- plspm(data, path_matrix, blocks, modes)

# Menampilkan hasil model
print(pls_model)

# Menampilkan tabel Outer Loadings
outer_loadings <- pls_model$outer_model
print(outer_loadings)

# Menampilkan tabel Path Coefficients
path_coefficients <- pls_model$path_coefs
print(path_coefficients)

# Menampilkan tabel p-values
p_values <- pls_model$boot$paths
print(p_values)

# Visualisasi model luar (Outer Model)
plot(pls_model, what = "loadings")

# Visualisasi diagram jalur (Path Diagrams)
plot(pls_model, what = "inner")

install.packages("plspm")
install.packages("semPLS")
install.packages("ggplot2")
install.packages("dplyr")
# Memuat paket yang diperlukan
library(plspm)
library(semPLS)
library(ggplot2)
library(dplyr)

# Contoh data: variabel laten dengan dua sub-variabel, masing-masing dua item
data <- data.frame(
  X1_item1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  X1_item2 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item1 = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  X2_item2 = c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
  M_item1 = c(5, 4, 6, 5, 7, 6, 5, 7, 6, 8),
  M_item2 = c(4, 3, 5, 4, 6, 5, 4, 6, 5, 7),
  Y_item1 = c(15, 18, 16, 20, 22, 24, 21, 23, 25, 27),
  Y_item2 = c(14, 17, 15, 19, 21, 23, 20, 22, 24, 26)
)

# Menentukan matriks jalur (path matrix)
path_matrix <- rbind(
  c(0, 0, 0),
  c(1, 0, 0),
  c(1, 1, 0)
)
colnames(path_matrix) <- rownames(path_matrix) <- c("X", "M", "Y")

# Menentukan blok indikator untuk setiap variabel laten
blocks <- list(
  c("X1_item1", "X1_item2", "X2_item1", "X2_item2"),
  c("M_item1", "M_item2"),
  c("Y_item1", "Y_item2")
)

# Menentukan tipe skema jalur
modes <- c("A", "A", "A")

# Melakukan analisis PLS-SEM
pls_model <- plspm(data, path_matrix, blocks, modes)

# Menampilkan hasil model
print(pls_model)

# Menampilkan tabel Outer Loadings
outer_loadings <- pls_model$outer_model
print(outer_loadings)

# Menampilkan tabel Path Coefficients
path_coefficients <- pls_model$path_coefs
print(path_coefficients)

# Menggunakan bootstrap untuk mendapatkan p-value
boot_res <- plspm(data, path_matrix, blocks, modes, boot.val = TRUE, br = 500)

# Menampilkan tabel p-values dari bootstrap
boot_paths <- boot_res$boot$paths
print(boot_paths)

# Menambahkan kolom interpretasi berdasarkan p-value
results <- data.frame(
  Term = rownames(path_coefficients),
  Estimate = path_coefficients[, 1],
  Std_Error = path_coefficients[, 2],
  t_value = path_coefficients[, 3],
  p_value = boot_paths[, 4],
  Significance = ifelse(boot_paths[, 4] < 0.05, "Significant", "Not Significant")
)

# Menampilkan tabel hasil
print(results)

# Analisis
cat("\nAnalisis:\n")
cat("Outer Loadings menunjukkan hubungan antara indikator dan konstruk laten.\n")
cat("Path Coefficients menunjukkan kekuatan dan arah hubungan antar konstruk laten.\n")
cat("P-value digunakan untuk menguji signifikansi statistik dari koefisien jalur. Jika p-value < 0.05, maka jalur tersebut signifikan secara statistik.\n")

# Visualisasi model luar (Outer Model)
plot(pls_model, what = "loadings")

# Visualisasi diagram jalur (Path Diagrams)
plot(pls_model, what = "inner")

